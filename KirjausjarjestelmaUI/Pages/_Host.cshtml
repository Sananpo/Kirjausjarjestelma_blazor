@page "/"
@namespace KirjausjarjestelmaUI.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>KirjausjarjestelmaUI</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
</head>
<body>
    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" />
    </app>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <script src="~/OpenLayers.js"></script>
    <style type="text/css">
        html, body, #basicMap {
            width: 100%;
            height: 100%;
            margin: 0;
        }
    </style>
    <script>
        var map, vectorLayer, selectMarkerControl, selectedFeature;
        var lat = 66.926837;
        var lon = 26.002899;
        var zoom = 15;
        var curpos = new Array();
        var dotnetObj;

        var fromProjection = new OpenLayers.Projection("EPSG:4326");   // Transform from WGS 1984
        var toProjection = new OpenLayers.Projection("EPSG:900913"); // to Spherical Mercator Projection

        var cntrposition = new OpenLayers.LonLat(lon, lat).transform(fromProjection, toProjection);
        
        var markers = new OpenLayers.Layer.Markers("Markers");

        function init(dotNetObject) {
            dotnetObj = dotNetObject;

            map = new OpenLayers.Map("Map", {});
            var mapnik = new OpenLayers.Layer.OSM("MAP");

            map.addLayer(mapnik);
            map.addLayer(markers);  
            map.setCenter(cntrposition, zoom);

            var click = new OpenLayers.Control.Click();
            map.addControl(click);

            click.activate();
        };

        function addMarker(lon, lat) {
            console.log(map)
            console.log(lon, lat)
            // First, clear all existing markers
            markers.clearMarkers();
            // Then, transform the coordinates
            var newPos = new OpenLayers.LonLat(lon, lat).transform(fromProjection, toProjection);
            // Create and add the new marker
            var newMarker = new OpenLayers.Marker(newPos);
            markers.addMarker(newMarker);
        }

        OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {

            initialize: function (options) {
                this.handlerOptions = OpenLayers.Util.extend(
                    {}, this.defaultHandlerOptions
                );
                OpenLayers.Control.prototype.initialize.apply(
                    this, arguments
                );
                this.handler = new OpenLayers.Handler.Click(
                    this, {
                    'click': this.trigger
                }, this.handlerOptions
                );
            },

            trigger: function (e) {
                var lonlat = map.getLonLatFromPixel(e.xy);
                var lonlat1 = new OpenLayers.LonLat(lonlat.lon, lonlat.lat).transform(toProjection, fromProjection);
                dotnetObj.invokeMethodAsync('SetCoords', lonlat1.lon.toString(), lonlat1.lat.toString());
            },
        });
    </script>
</body>
</html>
